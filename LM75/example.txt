/*	сохраняем данный файл в кодировке UTF-8		*/

	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com

	#include "LM75.h"

	float T;
	float THYST;
	float TOS;
	
	.........
	.........

main()=============================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// записываем температуру THYST (температура выключения пина OS) ( кратную 0,5°C ) по умолчанию равна 75°C
	//LM75_THYST_Write( -5.5f );
	//HAL_Delay (20);	// ждем так как запись данных
	
	// записываем температуру TOS (температура включения пина OS) ( кратную 0,5°C ) по умолчанию равна 80°C
	//LM75_TOS_Write( 100.0f );
	//HAL_Delay (20); // ждем так как запись данных
	
	// считываем температуру THYST (температура выключения пина OS) ( кратную 0,5°C ) по умолчанию равна 75°C
	THYST = LM75_THYST_Read();
	  
	// считываем температуру TOS (температура включения пина OS) ( кратную 0,5°C ) по умолчанию равна 80°C
	TOS = LM75_TOS_Read(); 
	
	// включаем спящий режим ( датчик засыпает и не измеряет температуру )
	// функция включения и выключения спящего режима датчика
	// передаваемый параметр ( 1 - включить спящий режим, 0- выключить )
	// по умолчанию выключен спящий режим
	//LM75_SleepMode( 1 );
	//HAL_Delay (20);	// ждем так как запись данных
	
	//HAL_Delay (5000);
	
	// выключаем спящий режим ( датчик засыпает и не измеряет температуру )
	//LM75_SleepMode( 0 );
	//HAL_Delay (20);	// ждем так как запись данных
	
	// функция включения Режим компаратора / прерывания: 0 - режим компаратора ( по умолчанию ), 1 - режим прерывания.
	// передаваемый параметр ( 1 - режим прерывания, 0- режим компаратора ( по умолчанию ) )
	// по умолчанию режим компаратора
	//LM75_ComparatorOrInterruptMode(0);
	//HAL_Delay (20);	// ждем так как запись данных
	
	// функция установки Полярности: 0 - активный низкий уровень ( по умолчанию ), 1 - активный высокий уровень.
	// передаваемый параметр ( 1 - активный высокий уровень, 0- активный низкий уровень ( по умолчанию ) )
	// по умолчанию активный низкий уровень
	//LM75_LevelOsMode(0);
	//HAL_Delay (20);	// ждем так как запись данных
	
	// функция установки Очереди отказов: количество отказов, которые необходимо обнаружить перед установкой O.S. выход, чтобы избежать ложного отключения из-за шума
	// сколько раз должен сработать переход через границу чтобы включилась ножка OS
	//	D3 – D4 = 0x00 -> 1 ( по умолчанию )
	//	D3 – D4 = 0x01 -> 2 
	//	D3 – D4 = 0x02 -> 4 
	//	D3 – D4 = 0x03 -> 6 
	// передаваемые параметры 1, 2, 4, 6. 
	// 1 ( по умолчанию )
	//LM75_FaultQueueMode(1);
	//HAL_Delay (20);	// ждем так как запись данных
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
  
	.........
	.........
	.........

while(1)===========================================================================================================================

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  
	  // считываем текущую температуру ( кратную 0,5°C )
	  T =  LM75_TemperatureRead();	
	  
	  HAL_Delay (1000);
	  
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  
	.........
	.........
	.........
	.........

=== end while(1) ==================================================================================================================
=== end main() ====================================================================================================================
