/*
	
  ******************************************************************************
  * @file 			( фаил ):   LM75.h
  * @brief 		( описание ):  	
  ******************************************************************************
  * @attention 	( внимание ):	author: Golinskiy Konstantin	e-mail: golinskiy.konstantin@gmail.com
  ******************************************************************************
  
*/

#ifndef _LM75_H
#define _LM75_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ----------------------------------------------------------*/

#include "main.h"


/*
	Разница между LM75A и LM75B(C):
	разрешение температуры 9 бит LM75B(C) и 11 бит LM75A	
*/

//#############  SETUP  ##########################################################################################

		// указываем с каким датчиком работаем -----------------------------------------------------
		//#define LM75_11BIT	// только для LM75A ( максимальная точность )
		#define LM75_9BIT		// подходит как для LM75A так и для LM75B(C) ( точность хуже )
		//------------------------------------------------------------------------------------------
		
		// указываем I2C с которым работаем --------------------------------------------------------
		#define MY_I2C			hi2c2
		//------------------------------------------------------------------------------------------
		
		// указываем адрес устройства на шине I2C --------------------------------------------------
		#define LM75_ADDRESS	((0x48 | 0x00) << 1 )   // 0x00 это наши последние 3 бита ( A0->GND, A1->GND and A2->GND )
														// если будут контакты подтянуты к питанию то ставим соотведствующие биты
		//------------------------------------------------------------------------------------------
		
//################################################################################################################


//---------------------------------------------------------------------------------------------
// данный датчик имеет 4 ригистра:
#define	LM75_TEMPERATURE		0x00	// Температура (только чтение) (по умолчанию при включении питания)		0b00000000
#define LM75_CONFIGURATION		0x01	// Конфигурация (чтение / запись)										0b00000001
#define LM75_THYST				0x02	// Температура THYST (температура выключения пина OS)(чтение / запись)	0b00000010
#define LM75_TOS				0x03	// Температура TOS (температура включения пина OS)(чтение / запись)		0b00000011

// например если стоит TOS = 80°C и THYST = 75°C то при 80°C включится пин OS а при 75°C отключится
// Внимание!! пин O.S. активный уровень LOW
// по умолчанию стоит TOS = 80°C и THYST = 75°C
//---------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------
// регистр LM75_TEMPERATURE имеет 16 бит 

// регистр LM75_CONFIGURATION имеет 8 бит:
// D0: Shutdown: Если установлено значение 1, LM75 переходит в режим отключения с низким энергопотреблением.
// D1: Режим компаратора / прерывания: 0 - режим компаратора ( по умолчанию ), 1 - режим прерывания.
// D2: О.С. Полярность: 0 - активный низкий уровень ( по умолчанию ), 1 - активный высокий уровень. является выходом с открытым стоком при любых условиях.
// D3 – D4: Очередь отказов: количество отказов, которые необходимо обнаружить перед установкой O.S. выход, чтобы избежать ложного отключения из-за
// к шуму. Неисправности обнаруживаются в конце преобразования. См. Указанное время преобразования температуры в
//	D3 – D4 = 0x00 -> 1 ( по умолчанию )
//	D3 – D4 = 0x01 -> 2 
//	D3 – D4 = 0x02 -> 4 
//	D3 – D4 = 0x03 -> 6 
// D5 D6 D7 не используются ( заполняем 0 )

// регистр LM75_THYST и LM75_TOS имеют по 16 бит каждый и данные пишутся или читаются аналогично регистру LM75_TEMPERATURE 
// ( максимум 9 бит даже если температура в 11 битном режиме )

// запись данных после сброса микросхемы сбрасывается и становится по умолчанию

//-----------------------------------------------------------------------------------------

#define ABS(x)   ((x) > 0 ? (x) : -(x))	

//-----------------------------------------------------------------------------------------

#ifdef MY_I2C
	extern I2C_HandleTypeDef MY_I2C;
#endif

//-----------------------------------------------------------------------------------------

/* Functions prototypes ----------------------------------------------*/

/*
	******************************************************************************
	* @brief	 ( описание ):  функция (вспомогательная ) для чтения температуры ( LM75 9 bit ) из указанного регистра
	* @param	( параметры ):	регистр
	* @return  ( возвращает ):	температуру

	******************************************************************************
*/
float LM75_Temperature_9Bit_ReadReg( uint8_t reg );
//-----------------------------------------------------------------------------------------


/*
	******************************************************************************
	* @brief	 ( описание ):  функция (вспомогательная ) для чтения температуры ( LM75A 11 bit ) из указанного регистра
	* @param	( параметры ):	регистр
	* @return  ( возвращает ):	температуру

	******************************************************************************
*/
float LM75_Temperature_11Bit_ReadReg( uint8_t reg );
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  функция (вспомогательная ) для записи температуры в указаный регистр ( кротно 0,5°C )
	* @param	( параметры ):	регистр, температура
	* @return  ( возвращает ):	

	******************************************************************************
*/
static void LM75_TemperatureWriteReg( uint8_t reg, float Temperature );
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  функция (вспомогательная ) для чтения конфигурации настройки датчика
	* @param	( параметры ):	
	* @return  ( возвращает ):	конфиг

	******************************************************************************
*/
static uint8_t LM75_ReadConfig(void);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  функция включения и выключения спящего режима датчика
	* @param	( параметры ):	передаваемый параметр ( 1 - включить спящий режим, 0- выключить )
								по умолчанию выключен спящий режим
	* @return  ( возвращает ):	

	******************************************************************************
*/
void LM75_SleepMode(uint8_t mode);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  функция включения Режим компаратора / прерывания: 0 - режим компаратора ( по умолчанию ), 1 - режим прерывания.
	* @param	( параметры ):	передаваемый параметр ( 1 - режим прерывания, 0- режим компаратора ( по умолчанию ) )
								по умолчанию режим компаратора
	* @return  ( возвращает ):	

	******************************************************************************
*/
void LM75_ComparatorOrInterruptMode(uint8_t mode);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  функция установки Полярности: 0 - активный низкий уровень ( по умолчанию ), 1 - активный высокий уровень. 
	* @param	( параметры ):	передаваемый параметр ( 1 - активный высокий уровень, 0- активный низкий уровень ( по умолчанию ) )
								по умолчанию активный низкий уровень
	* @return  ( возвращает ):	

	******************************************************************************
*/
void LM75_LevelOsMode(uint8_t mode);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ): функция установки Очереди отказов: количество отказов, которые необходимо обнаружить перед установкой O.S. выход, чтобы избежать ложного отключения из-за шума
								сколько раз должен сработать переход через границу чтобы включилась ножка OS 
								D3 – D4 = 0x00 -> 1 ( по умолчанию )
								D3 – D4 = 0x01 -> 2 
								D3 – D4 = 0x02 -> 4 
								D3 – D4 = 0x03 -> 6 
	* @param	( параметры ):	передаваемые параметры 1, 2, 4, 6. 1 ( по умолчанию )
	* @return  ( возвращает ):	

	******************************************************************************
*/
void LM75_FaultQueueMode(uint8_t mode);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ):  Функция чтения температуры возвращает температуру кратную 0,5°C
	* @param	( параметры ):	
	* @return  ( возвращает ):	

	******************************************************************************
*/
float LM75_TemperatureRead(void);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ): функция чтение Температуры THYST (температура выключения пина OS) по умолчанию равна 75°C 
	* @param	( параметры ):	
	* @return  ( возвращает ):	

	******************************************************************************
*/
float LM75_THYST_Read(void);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ): функция чтение Температуры TOS (температура включения пина OS) по умолчанию равна 80°C 
	* @param	( параметры ):	
	* @return  ( возвращает ):	

	******************************************************************************
*/
float LM75_TOS_Read(void);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ): функция записи Температуры THYST (температура выключения пина OS) ( кратную 0,5°C ) по умолчанию равна 75°C 
								запись данных после сброса микросхемы сбрасывается и становится по умолчанию
	* @param	( параметры ):	
	* @return  ( возвращает ):	

	******************************************************************************
*/
void LM75_THYST_Write(float TemperatureTHYST);
//-----------------------------------------------------------------------------------------

/*
	******************************************************************************
	* @brief	 ( описание ): функция записи Температуры TOS (температура включения пина OS) ( кратную 0,5°C ) по умолчанию равна 80°C 
								запись данных после сброса микросхемы сбрасывается и становится по умолчанию
	* @param	( параметры ):	
	* @return  ( возвращает ):	

	******************************************************************************
*/
void LM75_TOS_Write(float TemperatureTOS);
//-----------------------------------------------------------------------------------------


#ifdef __cplusplus
}
#endif

#endif	/*	_LM75_H */

/************************ (C) COPYRIGHT GKP *****END OF FILE****/
